def N := @ : *;
def O := @ : N;
def S := @ : /\(n:N).N;
def U := S O : N;

def Succ := \(x : N). S x : /\(x : N). N;

def Func := \(a : *).\(b : *)./\(x : a).b : /\(a : *)./\(b : *).*;
def Id := \(a : *).\(x : a).x : /\(a : *). /\(x : a).a;
def T := Succ : Func N N;

def Empty := /\(a : *). a : *;
def Not := \(a : *).Func a Empty : /\(a : *).*;
def ProofByAbsurd := \(t : *).\(a : *).\(absurd : Not a). absurd a t :
    /\(t : *)./\(a : *)./\(absurd : Not a).t;
def EmptyIsAbsurd := \(x : Empty).Id : Not Empty;

def And := \(a : *).\(b : *)./\(c : *). Func (Func a (Func b c)) c : /\(a : *)./\(b : *).*;
def AndIntro := \(a : *).\(b : *).\(u : a).\(v : b).
    \(c : *).\(f : Func a (Func b c)). f u v :
    
    /\(a : *)./\(b : *). /\(u : a). /\(v : b). And a b;
def AndElimL := \(a : *).\(b : *).\(and : And a b). and (\(v : a). \(w : b). v) :
    /\(a : *)./\(b : *). Func (And a b) a;
def AndElimR := \(a : *).\(b : *).\(and : And a b). and (\(v : a). \(w : b). w) :
    /\(a : *)./\(b : *). Func (And a b) b;

def Or := \(a : *).\(b : *)./\(c : *).Func (Func a c) (Func (Func b c) c) :
    /\(a : *)./\(b : *).*;
def OrIntroL := \(a : *).\(b : *).\(u : a).
    \(c : *).\(f : Func a c).\(g : Func b c). f u :
    /\(a : *)./\(b : *).Func a (Or a b);
def OrIntroR := \(a : *).\(b : *).\(v : b).
    \(c : *).\(f : Func a c).\(g : Func b c). g v :
    /\(a : *)./\(b : *).Func b (Or a b);
def OrElim := \(a : *).\(b : *).\(c : *).\(u : Or a b).
    \(f : Func a c).\(g : Func b c). u c f g :
    
    /\(a : *)./\(b : *)./\(c : *)./\(u : Or a b).
    /\(f : Func a c)./\(g : Func b c). c;
